{"version":3,"file":"compiled.js","sources":["app.js","render.js","maze.js"],"sourcesContent":["import $ from 'jquery';\nimport Hammer from 'hammerjs';\nimport CanvasView from './render';\nimport Maze from './maze';\n\nvar $canvas = $('canvas'), canvas = $canvas[0];\nvar view = new CanvasView(canvas);\nwindow.canvasview = view;\n\nvar hammer = new Hammer($canvas[0]);\nhammer.get('swipe').set({ direction: Hammer.DIRECTION_ALL });\nhammer.get('pan').set({ enable: false });\nhammer.on('swipeup swiperight swipedown swipeleft', function(e) {\n\tswitch (e.type) {\n\t\tcase 'swipeup': view.panUp(); break;\n\t\tcase 'swiperight': view.panRight(); break;\n\t\tcase 'swipedown': view.panDown(); break;\n\t\tcase 'swipeleft': view.panLeft(); break;\n\t}\n});\nhammer.on('tap', function(e) {\n\tconsole.log(e.type, e.center);\n});\nhammer.on('doubletap', function(e) {\n\tconsole.log(e.type, arguments);\n});\nhammer.on('press', function(e) {\n\tconsole.log(e.type, arguments);\n});\n\nMousetrap.bind('up', function() { view.panUp(); });\nMousetrap.bind('right', function() { view.panRight(); });\nMousetrap.bind('down', function() { view.panDown(); });\nMousetrap.bind('left', function() { view.panLeft(); });\n\n$(window).on('mousewheel', function(e) {\n\tif (e.deltaY > 0) {\n\t\tview.zoomIn();\n\t} else if (e.deltaY) {\n\t\tview.zoomOut();\n\t}\n});\n\nfunction resizeCanvas() {\n\tvar w = $canvas.outerWidth(), h = $canvas.outerHeight(); // copy actual size\n\t$canvas.attr({width: w, height: h}); // set width and height to actual size\n\tview.requireRedraw();\n}\nresizeCanvas();\nvar resizeTimeout;\n$(window).on('resize', function() {\n\tif (resizeTimeout) {\n\t\tclearTimeout(resizeTimeout);\n\t}\n\tresizeTimeout = setTimeout(function() {\n\t\tresizeTimeout = null;\n\t\tresizeCanvas();\n\t}, 100);\n});\n\n\nconsole.log('icemaze loaded!');\n","import $ from 'jquery';\n\nconst minTileSize = 9;\nconst maxTileSize = 61;\nconst frameMillis = 1000 / 60;\nconst zoomAnimMillis = 1000 / 4;\nconst panAnimPerTileMillis = 1000 / 10;\n\nexport default class CanvasView {\n\tconstructor(canvas) {\n\t\tthis.canvas = canvas;\n\t\tthis.panX = 0;\n\t\tthis.panY = 0;\n\t\tthis.tileSize = 21;\n\t\tthis.debugRuntime = 0;\n\t\tthis.redrawRequired = false;\n\t\tthis.lastRedrawTime = 0;\n\t\tthis.preDrawCallbacks = [];\n\t\tthis.postDrawCallbacks = [];\n\t\tthis.requireRedraw();\n\t}\n\n\tzoomIn() {\n\t\tthis.zoomTo(this.tileSize + (this.tileSize / 4)); // +25%\n\t}\n\n\tzoomOut() {\n\t\tthis.zoomTo(this.tileSize - (this.tileSize / 4)); // -25%\n\t}\n\n\tzoomTo(targetTileSize) {\n\t\tif (this.zoomInProgress) {\n\t\t\t// TODO interrupt and zoom to new target\n\t\t\treturn;\n\t\t}\n\t\ttargetTileSize = Math.round(targetTileSize);\n\t\tif (targetTileSize % 2 === 0) {\n\t\t\t// scene is centered on tile center;\n\t\t\t// use odd number for target tile size so final view is pixel perfect\n\t\t\ttargetTileSize += 1;\n\t\t}\n\t\tif (targetTileSize < minTileSize) {\n\t\t\ttargetTileSize = minTileSize;\n\t\t} else if (targetTileSize > maxTileSize) {\n\t\t\ttargetTileSize = maxTileSize;\n\t\t}\n\t\tif (targetTileSize === this.tileSize) {\n\t\t\treturn;\n\t\t}\n\t\tthis.zoomInProgress = true;\n\n\t\tlet initialTileSize = this.tileSize;\n\t\tlet difference = targetTileSize - initialTileSize;\n\t\tlet animStartMillis = (new Date()).getTime();\n\t\tlet stepFunction = (function() {\n\t\t\tvar percent = (this.lastRedrawTime - animStartMillis) / zoomAnimMillis;\n\t\t\tif (percent < 0) { percent = 0; }\n\t\t\telse if (percent > 1) { percent = 1; }\n\t\t\tthis.tileSize = initialTileSize + (percent * difference);\n\t\t\tif (percent < 1) {\n\t\t\t\tthis.requireRedraw(stepFunction);\n\t\t\t} else {\n\t\t\t\tconsole.log('tile size', this.tileSize);\n\t\t\t\tthis.zoomInProgress = false;\n\t\t\t\tthis.requireRedraw();\n\t\t\t}\n\t\t}).bind(this);\n\t\tthis.requireRedraw(stepFunction);\n\t}\n\n\tpanUp() {\n\t\tthis.panTo({x: this.panX, y: this.panY - 1});\n\t}\n\n\tpanRight() {\n\t\tthis.panTo({x: this.panX + 1, y: this.panY});\n\t}\n\n\tpanDown() {\n\t\tthis.panTo({x: this.panX, y: this.panY + 1});\n\t}\n\n\tpanLeft() {\n\t\tthis.panTo({x: this.panX - 1, y: this.panY});\n\t}\n\n\tpanTo({x: targetX, y: targetY}) {\n\t\tif (this.panInProgress) {\n\t\t\t// TODO interrupt and pan to new target\n\t\t\treturn;\n\t\t}\n\t\ttargetX = Math.round(targetX);\n\t\ttargetY = Math.round(targetY);\n\t\tif (targetX === this.panX && targetY === this.panY) {\n\t\t\treturn;\n\t\t}\n\t\tthis.panInProgress = true;\n\n\t\tlet initialX = this.panX, initialY = this.panY;\n\t\tlet diffX = targetX - initialX, diffY = targetY - initialY;\n\t\tlet hypotenuse = Math.sqrt(diffX*diffX + diffY*diffY);\n\t\tlet animMillis = hypotenuse * panAnimPerTileMillis;\n\t\tlet animStartMillis = (new Date()).getTime();\n\t\tlet stepFunction = (function() {\n\t\t\tvar percent = (this.lastRedrawTime - animStartMillis) / animMillis;\n\t\t\tif (percent < 0) { percent = 0; }\n\t\t\telse if (percent > 1) { percent = 1; }\n\t\t\tthis.panX = initialX + (percent * diffX);\n\t\t\tthis.panY = initialY + (percent * diffY);\n\t\t\tif (percent < 1) {\n\t\t\t\tthis.requireRedraw(stepFunction);\n\t\t\t} else {\n\t\t\t\tconsole.log('pan center', this.panX, this.panY);\n\t\t\t\tthis.panInProgress = false;\n\t\t\t\tthis.requireRedraw();\n\t\t\t}\n\t\t}).bind(this);\n\t\tthis.requireRedraw(stepFunction);\n\t}\n\n\trequireRedraw(preDrawCallback, postDrawCallback) {\n\t\tif (typeof preDrawCallback === 'function') {\n\t\t\tthis.preDrawCallbacks.push(preDrawCallback);\n\t\t}\n\t\tif (typeof postDrawCallback === 'function') {\n\t\t\tthis.postDrawCallbacks.push(postDrawCallback);\n\t\t}\n\t\tif (this.redrawRequired) {\n\t\t\treturn;\n\t\t}\n\t\tthis.redrawRequired = true;\n\t\tif (window.requestAnimationFrame) {\n\t\t\twindow.requestAnimationFrame(this.redraw.bind(this));\n\t\t} else {\n\t\t\tlet nextFrame = frameMillis - ((new Date()).getTime() - this.lastRedrawTime);\n\t\t\twindow.setTimeout(this.redraw.bind(this), nextFrame > 0 ? nextFrame : 0);\n\t\t}\n\t}\n\n\tredraw() {\n\t\tif (++this.debugRuntime > 10000) {\n\t\t\t$(this.canvas).remove();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.redrawRequired = false;\n\t\tthis.lastRedrawTime = (new Date()).getTime();\n\n\t\tlet preDrawCallbacks = this.preDrawCallbacks;\n\t\tthis.preDrawCallbacks = [];\n\t\tpreDrawCallbacks.forEach(function(cb){ cb(); });\n\n\t\tthis.drawGrid();\n\n\t\tlet postDrawCallbacks = this.postDrawCallbacks;\n\t\tthis.postDrawCallbacks = [];\n\t\tpostDrawCallbacks.forEach(function(cb){ cb(); });\n\t}\n\n\tdrawGrid() {\n\t\tlet w = this.canvas.width, h = this.canvas.height, tileSize = this.tileSize;\n\t\tlet c2d = this.canvas.getContext('2d');\n\n\t\tc2d.clearRect(0, 0, w, h);\n\n\t\tc2d.lineWidth = 1;\n\t\tc2d.strokeStyle = 'blue';\n\t\tc2d.strokeRect(0, 0, w, h);\n\n\t\tc2d.beginPath();\n\t\tlet x = ((w-tileSize)/2)%tileSize - tileSize*(this.panX%1);\n\t\tfor (; x < w; x += tileSize) {\n\t\t\tc2d.moveTo(x, 0);\n\t\t\tc2d.lineTo(x, h);\n\t\t}\n\t\tlet y = ((h-tileSize)/2)%tileSize - tileSize*(this.panY%1)\n\t\tfor (; y < h; y += tileSize) {\n\t\t\tc2d.moveTo(0, y);\n\t\t\tc2d.lineTo(w, y);\n\t\t}\n\t\tc2d.closePath();\n\t\tc2d.lineWidth = 1;\n\t\tc2d.strokeStyle = 'rgba(0,0,0,.2)';\n\t\tc2d.stroke();\n\t}\n}\n","export default class Maze {\n\n\tconstructor() {\n\t\tthis.grid = {};\n\t}\n\n\tget(x, y) {\n\t\treturn (this.grid[x] || {})[y];\n\t}\n\n\ttoggle(x, y) {\n\t\tvar row = this.grid[x] || (this.grid[x] = {});\n\t\trow[y] = !row[y];\n\t\treturn row[y];\n\t}\n\n}\n"],"names":["resizeCanvas","w","$canvas","outerWidth","h","outerHeight","attr","width","height","requireRedraw","minTileSize","maxTileSize","frameMillis","zoomAnimMillis","panAnimPerTileMillis","CanvasView","canvas","panX","panY","tileSize","debugRuntime","redrawRequired","lastRedrawTime","preDrawCallbacks","postDrawCallbacks","zoomTo","this","targetTileSize","zoomInProgress","Math","round","initialTileSize","difference","animStartMillis","Date","getTime","stepFunction","percent","log","bind","panTo","x","y","targetX","targetY","panInProgress","initialX","initialY","diffX","diffY","hypotenuse","sqrt","animMillis","preDrawCallback","postDrawCallback","push","window","requestAnimationFrame","redraw","nextFrame","setTimeout","remove","forEach","cb","drawGrid","c2d","getContext","clearRect","lineWidth","strokeStyle","strokeRect","beginPath","moveTo","lineTo","closePath","stroke","grid","row","$","view","canvasview","hammer","Hammer","get","set","direction","DIRECTION_ALL","enable","on","e","type","panUp","panRight","panDown","panLeft","center","arguments","Mousetrap","deltaY","zoomIn","zoomOut","resizeTimeout","console"],"mappings":"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"}